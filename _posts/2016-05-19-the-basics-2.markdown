---
layout: post
title:  "The Basics (part 2)"
date:   2016-05-18 22:30:16
description: Get to know about Functions
---

Gimana sih cara bikin *Function* di Swift? Ya tinggal bikin aja. Hahah...😂
Oya, Sebelumnya ane berencana membahas tentang **Functions and Closures**. Tapi setelah ane pikir2, untuk *Closures* di skip aja dulu. Karena pembahasan tentang *Closures* sendiri sedikit rumit. So, nanti bakal ada pembahasan tersendiri ya mengenai *Closure*. Okelah kalau begitu, yuk kita bahas *Functions* di Swift.

{% highlight swift %}

/// Let's start Swift basics part 2 
let theBasics = Hello.Swift(title: "The Basics", part: 2)
theBasics.start()

{% endhighlight %}

##### Note
<blockquote>
   Kalian bisa sekalian membuka playground di Xcode untuk coba secara live dari apa yang ane jabarin disini. Sehingga kalian bisa melakukan improvisasi. Caranya, File > New > Playground (⌥⇧⌘N)<br/><br/>Playground itu sebuah interactive Swift coding environment yang langsung menampilkan result dari code yang kalian bikin.
</blockquote>

Sebuah function di Swift itu didefinisikan sebagai *func*, kemudian diikuti dengan nama function lalu parameter di dalam parentheses dan (->) untuk memberikan return type dari function tersebut. 

{% highlight swift %}

func greet(name: String) -> String {
   return "Hello \(name)"
} 

// Panggil
print(greet("Ahmad"))

{% endhighlight %}

Kalau parameter yang ane butuhkan lebih dari satu caranya gimana ya? Ah gampang itu, tinggal tambahin aja, pisahin pake coma (,). Kalau mau bikin function tapi ga pake return gimana ya? Oh untuk return type *Void* optional aja sih, boleh didefinisikan boleh enggak.

{% highlight swift %}

func greet(name: String, alreadyGreeted: Bool) {
   if alreadyGreeted {
      print("Hello Again \(name)")
   } else {
      print("Hello \(name)")
   }
}

// Panggil
greet("Ahmad", alreadyGreeted: true)

{% endhighlight %}

Oh iya, di Swift itu kita bisa kasih default value untuk masing-masing parameter jika dibutuhkan. Jika default value didefinisikan dalam sebuah parameter, maka kita bisa abaikan parameter itu ketika memanggil function tersebut. Nih contohnya kalau ada function pake default parameter.

{% highlight swift %}

func greet(name: String, alreadyGreeted: Bool = false) {
   if alreadyGreeted {
      print("Hello Again \(name)")
   } else {
      print("Hello \(name)")
   }
}

// Panggil
greet("Ahmad") // alreadyGreeted disini = false karena udah by default
greet("Ahmad", alreadyGreeted: true)

{% endhighlight %}

Udah paham mengenai optional value kan? Kalau belum paham berarti kalian perlu kembali membaca [The Basics (part 1)]({% post_url 2016-03-28-the-basics-1 %}). Optional value ini bisa kita terapkan dalam sebuah function. Caranya? Baca part 1. 😜  

Lanjut ke external parameter names. Apalagi tuh external parameter names? Digunakan supaya function yang kita bikin lebih enak dibaca dan semakin mudah dipahami aja. Nih contohnya..

{% highlight swift %}

func sayHello(to person: String, and anotherPerson: String) -> String {
   return "Hello \(person) and \(anotherPerson)"
}

// Panggil
sayHello(to: "Ahmad", and: "Mamad")

{% endhighlight %}

Gimana? Enak banget kan tuh function kalau dibaca.. Coba bandingkan kalau function di atas ga pake external parameter.

{% highlight swift %}

func sayHello(person: String, anotherPerson: String) -> String {
   return "Hello \(person) and \(anotherPerson)"
}

// Panggil
sayHello("Ahmad", anotherPerson: "Mamad")

{% endhighlight %}

Tapi tetap saja itu semua tergantung kondisi. Jikalau ada kondisi dimana pake external parameter itu malah bikin pusing ya lebih baik ga perlu pake saja. 


Masih mengenai parameter, kalau kita pengen nama parameter itu ga ikut ketika memanggil sebuah function. Bisa ditambahkan underscore (_) instead of expliciting external name for that parameter.

{% highlight swift %}

func sayHello(person: String, _ anotherPerson: String) -> String {
   return "Hello \(person) and \(anotherPerson)"
}

// Panggil
sayHello("Ahmad", "Mamad")

{% endhighlight %}

##### Note
<blockquote>
   Ketika kita memanggil sebuah function. Nama parameter pertama dari sebuah function tersebut akan selalu ga ikut. Jadi untuk parameter pertama ga perlu ditambahkan underscore (_).
</blockquote>

Karena array sebagai parameter udah terlalu mainstream. Swift juga bisa take a variable number of arguments. Maksudnya gimana ya? Liat codenya aja lah biar lebih jelas. Hahah...

{% highlight swift %}

func sumOf(numbers: Int...) -> Int {
    var sum = 0
    for number in numbers {
        sum += number
    }
    return sum
}

sumOf(10,20,30)

{% endhighlight %}

Swift juga bisa menggunakan sebuah function type as the return type of another function. Caranya gimana? Kita tinggal write aja function type setelah return arrow (->) dari return sebuah function. Untuk lebih jelasnya begini nih codenya..

{% highlight swift %}

func stepForward(input: Int) -> Int {
    return input + 1
}

func stepBackward(input: Int) -> Int {
    return input - 1
}

func chooseStepFunction(backwards: Bool) -> (Int) -> Int {
    return backwards ? stepBackward : stepForward
}

// Panggil
var currentValue = 3
let moveNearerToZero = chooseStepFunction(currentValue > 0)

// moveNearerToZero now refers to the stepBackward() function
moveNearerToZero(currentValue)

{% endhighlight %}

Sampai sini, semua contoh function yang ane berikan itu merupakan *global functions*. Kita juga bisa mendefiniskan function di dalam body sebuah function atau known as *nested functions*. Yap *nested function*, digunakan untuk code yang panjang dan/atau complex supaya codenya lebih terorganisir. Kita coba rewrite **chooseStepFunction(_:)** di atas menjadi *nested function*.

{% highlight swift %}

func chooseStepFunction(backwards: Bool) -> (Int) -> Int {
    func stepForward(input: Int) -> Int { return input + 1 }
    func stepBackward(input: Int) -> Int { return input - 1 }
    return backwards ? stepBackward : stepForward
}

// Panggil
var currentValue = -4
let moveNearerToZero = chooseStepFunction(currentValue > 0)
// moveNearerToZero now refers to the nested stepForward() function

while currentValue != 0 {
    print("\(currentValue)... ")
    currentValue = moveNearerToZero(currentValue)
}
print("zero!")

{% endhighlight %}


Gini aja sih cara bikin function di Swift. Gampang kan? Gampanglah 😁.
Nah, for the next part akan dibahas mengenai **Object and Classes**.

See you on the next part guys..

<br/>
<p class="center">Happy coding. Cheers! 🤓<br/>. . .</p> 




